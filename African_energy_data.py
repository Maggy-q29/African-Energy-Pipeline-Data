{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 32,
   "id": "cc0ba288",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      " Starting Africa Energy Data Extraction Pipeline...\n",
      " Fetch Status: 200\n",
      " Records retrieved: 2\n",
      "üîÑ Transforming data...\n",
      " Transformed data shape: (2, 34)\n",
      " Saving data to MongoDB...\n",
      "‚úÖ Connected to MongoDB successfully!\n",
      " Inserted 2 documents into MongoDB successfully.\n",
      " Visualizing data...\n",
      " No electricity-related data found.\n",
      " Pipeline completed successfully!\n"
     ]
    }
   ],
   "source": [
    "import pandas as pd\n",
    "import cloudscraper\n",
    "from pymongo import MongoClient\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "\n",
    "\n",
    "# 1: FETCHING DATA\n",
    "\n",
    "def fetch_energy_data():\n",
    "    url = \"https://africa-energy-portal.org/get-database-data\"\n",
    "    scraper = cloudscraper.create_scraper()\n",
    "    response = scraper.post(url)\n",
    "\n",
    "    print(f\" Fetch Status: {response.status_code}\")\n",
    "    try:\n",
    "        data = response.json()\n",
    "        print(f\" Records retrieved: {len(data)}\")\n",
    "        return data\n",
    "    except Exception as e:\n",
    "        print(\"‚ùå Failed to decode JSON:\", e)\n",
    "        return []\n",
    "\n",
    "\n",
    "# 2: TRANSFORMING DATA\n",
    "\n",
    "def transform_data(raw_data):\n",
    "    if not raw_data:\n",
    "        print(\" No data to transform.\")\n",
    "        return pd.DataFrame()\n",
    "\n",
    "    df = pd.DataFrame(raw_data)\n",
    "\n",
    "    columns = [\n",
    "        \"country\", \"country_serial\", \"metric\", \"unit\", \"sector\",\n",
    "        \"sub_sector\", \"sub_sub_sector\", \"source_link\", \"source\"\n",
    "    ] + [str(y) for y in range(2000, 2025)]\n",
    "\n",
    "    for col in columns:\n",
    "        if col not in df.columns:\n",
    "            df[col] = None\n",
    "\n",
    "    df = df[columns]\n",
    "    print(f\" Transformed data shape: {df.shape}\")\n",
    "    return df\n",
    "\n",
    "\n",
    "#  3: SAVING TO MONGODB\n",
    "\n",
    "def save_to_mongo(df):\n",
    "    if df.empty:\n",
    "        print(\" No data to save.\")\n",
    "        return\n",
    "\n",
    "    mongo_uri = \"mongodb+srv://quetsekhomargaret_db_user:Quesy30@cluster0.n7tv8lm.mongodb.net/?retryWrites=true&w=majority&appName=Cluster0\"\n",
    "\n",
    "    try:\n",
    "        client = MongoClient(mongo_uri)\n",
    "        client.admin.command(\"ping\")\n",
    "        print(\"‚úÖ Connected to MongoDB successfully!\")\n",
    "    except Exception as e:\n",
    "        print(\"‚ùå MongoDB connection failed:\", e)\n",
    "        return\n",
    "\n",
    "    db = client[\"energydb\"]\n",
    "    collection = db[\"energydata\"]\n",
    "\n",
    "    documents = df.to_dict(\"records\")\n",
    "    collection.insert_many(documents)\n",
    "\n",
    "    print(f\" Inserted {len(documents)} documents into MongoDB successfully.\")\n",
    "\n",
    "\n",
    "\n",
    "# 4: VISUALIZING DATA\n",
    "\n",
    "def visualize_data(df):\n",
    "    \"\"\"Simple line chart of electricity data for one country.\"\"\"\n",
    "    if df.empty:\n",
    "        print(\" No data to visualize.\")\n",
    "        return\n",
    "\n",
    "    metric_filter = \"electricity\"\n",
    "    df_metric = df[df[\"metric\"].str.contains(metric_filter, case=False, na=False)]\n",
    "\n",
    "    if df_metric.empty:\n",
    "        print(\" No electricity-related data found.\")\n",
    "        return\n",
    "\n",
    "    country = df_metric[\"country\"].iloc[0]\n",
    "    df_country = df_metric[df_metric[\"country\"] == country]\n",
    "\n",
    "    years = [str(y) for y in range(2000, 2025)]\n",
    "    values = df_country[years].T\n",
    "    values.columns = [country]\n",
    "    values = values.astype(float)\n",
    "\n",
    "    plt.figure(figsize=(10, 6))\n",
    "    plt.plot(values.index, values[country], marker='o', linewidth=2)\n",
    "    plt.title(f\"Electricity Indicator in {country} (2000‚Äì2024)\")\n",
    "    plt.xlabel(\"Year\")\n",
    "    plt.ylabel(\"Value\")\n",
    "    plt.grid(True, linestyle=\"--\", alpha=0.6)\n",
    "    plt.tight_layout()\n",
    "    plt.show()\n",
    "\n",
    "\n",
    "# ‚úÖ MAIN PIPELINE CONTROLLER\n",
    "\n",
    "def main():\n",
    "    \"\"\"Main ETL pipeline runner.\"\"\"\n",
    "    print(\" Starting Africa Energy Data Extraction Pipeline...\")\n",
    "\n",
    "    raw_data = fetch_energy_data()\n",
    "    if not raw_data:\n",
    "        print(\"‚ùå No data retrieved. Exiting.\")\n",
    "        return\n",
    "\n",
    "    print(\"üîÑ Transforming data...\")\n",
    "    df_wide = transform_data(raw_data)\n",
    "\n",
    "    print(\" Saving data to MongoDB...\")\n",
    "    save_to_mongo(df_wide)\n",
    "\n",
    "    print(\" Visualizing data...\")\n",
    "    visualize_data(df_wide)\n",
    "\n",
    "    print(\" Pipeline completed successfully!\")\n",
    "\n",
    "\n",
    "\n",
    "#  RUN SCRIPT\n",
    "\n",
    "if __name__ == \"__main__\":\n",
    "    main()\n"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.13.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
